# Development Docker Compose Configuration
# For production deployment, use: docker-compose.prod.yml
# See PRODUCTION.md for deployment instructions

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-flashcards}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  backend:
    build: .
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-flashcards}
      DATABASE_USERNAME: ${DB_USERNAME:-postgres}
      DATABASE_PASSWORD: ${DB_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-must-be-at-least-32-characters-long-and-secure}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-your-claude-api-key}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RESEND_API_KEY: ${RESEND_API_KEY:-re_T9VNkF49_PT6i9wiu54JMWb6XKuHeU7Yz}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL:-noreply@yourdomain.com}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080/api}
      NODE_ENV: development
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: